# This is a basic workflow that is manually triggered

name: Build Armbian Image

# Controls when the action will run. Workflow runs when manually triggered using the UI
# or API.
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      board:
        description: 'armbian build board'
        default: 'odroidc2'
        required: true
        type: choice
        options:
          - 'odroidc2'
          - 'nanopi-r2s'
      release:
        description: 'armbian build release'
        default: 'jammy'
        required: true
        type: string
      branch:
        description: 'armbian build branch'
        default: 'v24.02'
        required: true
        type: string
      userkpatch:
        description: 'armbian build img use user kernel patch'
        default: false
        required: true
        type: boolean
      onlykernel:
        description: 'armbian build only kernel'
        default: true
        required: true
        type: boolean

env:
  TZ: Asia/Shanghai

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "greet"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Runs a single command using the runners shell
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set Jop Summary
      run: |
        echo "**board**      : ${{ github.event.inputs.board }}" >> $GITHUB_STEP_SUMMARY
        echo "**release**    : ${{ github.event.inputs.release }}" >> $GITHUB_STEP_SUMMARY
        echo "**branch**     : ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
        echo "**userkpatch** : ${{ github.event.inputs.userkpatch }}" >> $GITHUB_STEP_SUMMARY
        echo "**onlykernel** : ${{ github.event.inputs.onlykernel }}" >> $GITHUB_STEP_SUMMARY

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install -y $(curl -fsSL https://is.gd/depend_ubuntu2204_armbian)
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir
        echo "COMPILE_STARTINGTIME=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV

    - name: Clone Armbian and fix it
      run: |
        git clone -b ${{ github.event.inputs.branch }} --depth=1 https://github.com/armbian/build.git armbian-build
        cp -rf userpatches armbian-build/
        cd armbian-build && bash ../scripts/modify_armbian.sh

    - name: Remove userpatches kernel patch
      if: ${{ github.event.inputs.userkpatch == 'false' }}
      run: |
        for i in `find armbian-build/userpatches -name '*.patch' 2>/dev/null`; do
          if [ "$(basename $i)" = "zzzzz-0000-do-nothing.patch" ]; then
            continue
          fi
          rm -f "$i"
          echo -e "Remove User Patch [ \033[32m $i \033[0m ]"
        done

    - name: Build Armbian
      id: build
      run: |
        cd armbian-build
        if [ "${{ github.event.inputs.onlykernel }}" = "true" ]; then
          ./compile.sh odroidc2 BOARD="${{ github.event.inputs.board }}" RELEASE="${{ github.event.inputs.release }}" EXTRAWIFI=yes kernel
        else
          ./compile.sh odroidc2 BOARD="${{ github.event.inputs.board }}" RELEASE="${{ github.event.inputs.release }}" EXTRAWIFI=yes
        fi

    - name: Copy Build Files
      run: |
        cd armbian-build
        # tar zcf /workdir/Armbian_${{ github.event.inputs.branch }}_${{ github.event.inputs.board }}_${{ github.event.inputs.release }}.tar.gz output/debs output/images

        echo "Copy deb img files!"
        for f_name in "*.deb" "*.img" "*.img.sha" "*.img.txt"; do
          for i in `find output/ -name "$f_name" 2>/dev/null`; do
            if [ -f "$i" ]; then
              echo "Copy [ $i ]"
              cp "$i" /workdir
            fi
          done
        done

        for i in `find /workdir/ -name "*.img"`; do
          if [ -f "$i" ]; then
            echo "Compression [ $i ]"
            xz -z "$i"
          fi
        done

        build_file=$(find /workdir -type f 2>/dev/null | wc -l)
        if [ "$build_file" -eq "0" ]; then
          echo "no build files !"
          exit 1
        fi

    - name: Copy Build logs
      run: |
        cd armbian-build
        if [ -d "output/logs" ]; then
          echo "Compression logs"
          tar zcf /workdir/logs.tar.gz output/logs
        fi

    - name: Copy Kernel Source
      env:
        CROSS_COMPILE: "aarch64-linux-gnu-"
        ARCH: "arm64"
      run: |
        cd armbian-build
        [ -d "cache/sources/linux-kernel-worktree/" ] || exit 0
        cd cache/sources

        kconfig="$(find linux-kernel-worktree/ -name .config 2>/dev/null)"
        [ "$kconfig" != "" ] || exit 0

        kversion="$(grep '# Linux/arm64' $kconfig | cut -d ' ' -f 3)"
        echo "Kernel Version [ $kversion ]"
        echo "ARMBIAN_KERNEL_VERSION=$kversion" >> $GITHUB_ENV

        cd `dirname "$kconfig"`
        sudo make clean
        cd - >/dev/null 2>&1

        echo "Compression Kernel Source [ linux_source_${{ github.event.inputs.branch }}_v${kversion}.tar.gz ]"
        tar zcf "/workdir/linux_source_${{ github.event.inputs.branch }}_v${kversion}.tar.gz" linux-kernel-worktree

    - name:  Upload Artifact
      uses: actions/upload-artifact@v4.1.0
      with:
        name: output
        path: /workdir/*

    - name: Upload file to Release (no user patch)
      uses: ncipollo/release-action@main
      if: ${{ github.event.inputs.userkpatch == 'false' }}
      with:
        tag: Armbian_${{ github.event.inputs.branch }}_v${{ env.ARMBIAN_KERNEL_VERSION }}_${{ github.event.inputs.board }}_${{ github.event.inputs.release }}
        artifacts: /workdir/*
        allowUpdates: true
        token: ${{ secrets.GH_TOKEN }}
        body: |
          This is Armbian dtb image (no user patch)

    - name: Upload file to Release
      uses: ncipollo/release-action@main
      if: ${{ github.event.inputs.userkpatch == 'true' }}
      with:
        tag: Armbian_${{ github.event.inputs.branch }}_v${{ env.ARMBIAN_KERNEL_VERSION }}_${{ github.event.inputs.board }}_${{ github.event.inputs.release }}_${{ env.COMPILE_STARTINGTIME }}
        artifacts: /workdir/*
        allowUpdates: true
        token: ${{ secrets.GH_TOKEN }}
        body: |
          This is Armbian dtb image
